/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.BookRepository;
import hr.algebra.dal.BookUserRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Book;
import hr.algebra.model.BookTransferable;
import hr.algebra.model.User;
import hr.algebra.model.UserFavorites;
import hr.algebra.utilities.JAXBUtils;
import hr.algebra.utilities.MessageUtils;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.DropMode;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;
import javax.swing.TransferHandler;
import javax.xml.bind.JAXBException;

/**
 *
 * @author AdrianBusak
 */
public class DragAndDrop extends javax.swing.JPanel {

    private final DefaultListModel<Book> favoriteBooksModel = new DefaultListModel<>();
    private BookRepository bookRepo;
    private BookUserRepository bookUserRepo;
    private User user;

    /**
     * Creates new form DragAndDrop
     */
    public DragAndDrop(User user) {
        this.user = user;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsBooks = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        lsFavoriteBooks = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsBooks);

        lsFavoriteBooks.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lsFavoriteBooksMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(lsFavoriteBooks);

        jLabel1.setText("favorite books");

        jLabel2.setText("Books");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        jLabel4.setText("Drag and drop");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(543, 543, 543))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 336, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(234, 234, 234))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(203, 203, 203)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(323, 323, 323))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(132, 132, 132)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addContainerGap(141, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void lsFavoriteBooksMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lsFavoriteBooksMouseClicked
        if (evt.getClickCount() == 2) { // dupli klik
            int index = lsFavoriteBooks.locationToIndex(evt.getPoint());
            if (index >= 0) {
                Book book = favoriteBooksModel.getElementAt(index);
                favoriteBooksModel.removeElement(book);
            }
        }
    }//GEN-LAST:event_lsFavoriteBooksMouseClicked

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList<Book> lsBooks;
    private javax.swing.JList<Book> lsFavoriteBooks;
    // End of variables declaration//GEN-END:variables

    private void init() {
        try {
            initRepository();
            initLists();
            initDragNDrop();
        } catch (Exception ex) {
            Logger.getLogger(EditBooksPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void initRepository() throws Exception {
        bookRepo = RepositoryFactory.getRepository(BookRepository.class);
        bookUserRepo = RepositoryFactory.getRepository(BookUserRepository.class);
    }

    private void initLists() throws Exception {
        DefaultListModel<Book> booksModel = new DefaultListModel<>();
        List<Book> allBooks = bookRepo.selectBooks();

        if (allBooks.isEmpty()) {
            MessageUtils.showInformationMessage("Repository","No books found in the repository.");
        } else {
            allBooks.forEach(booksModel::addElement);
        }
        lsBooks.setModel(booksModel);

        List<Book> favoriteBooks = bookUserRepo.getBooksForUser(user.getId());

        if (!favoriteBooks.isEmpty()) {
            favoriteBooks.forEach(favoriteBooksModel::addElement);
        }
        lsFavoriteBooks.setModel(favoriteBooksModel);

    }

    private void initDragNDrop() {
        lsBooks.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        lsBooks.setDragEnabled(true);
        lsBooks.setTransferHandler(new ExportTransferHandler());

        lsFavoriteBooks.setDropMode(DropMode.ON);
        lsFavoriteBooks.setTransferHandler(new ImportTransferHandler());
    }

    private class ExportTransferHandler extends TransferHandler {

        @Override
        public int getSourceActions(JComponent c) {
            return COPY;
        }

        @Override
        public Transferable createTransferable(JComponent c) {
            Book selectedBook = lsBooks.getSelectedValue();
            if (selectedBook != null) {
                return new BookTransferable(selectedBook);
            }
            return null;
        }
    }

    private class ImportTransferHandler extends TransferHandler {

        @Override
        public boolean canImport(TransferSupport support) {
            return support.isDataFlavorSupported(BookTransferable.BOOK_FLAVOR);
        }

        @Override
        public boolean importData(TransferSupport support) {
            if (!canImport(support)) {
                return false;
            }

            try {
                Transferable transferable = support.getTransferable();
                Book book = (Book) transferable.getTransferData(BookTransferable.BOOK_FLAVOR);

                if (!favoriteBooksModel.contains(book)) {
                    favoriteBooksModel.addElement(book);

                    try {
                        bookUserRepo.addBookUser(book.getId(), user.getId());
                    } catch (Exception ex) {
                        Logger.getLogger(DragAndDrop.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    return true;
                }

            } catch (UnsupportedFlavorException | IOException ex) {
                Logger.getLogger(DragAndDrop.class.getName()).log(Level.SEVERE, null, ex);
            }
            return false;
        }

    }

}
