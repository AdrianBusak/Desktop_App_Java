/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package hr.algebra.view;

import hr.algebra.dal.BookRepository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.Book;
import hr.algebra.parsers.rss.BookParser;
import hr.algebra.utilities.MessageUtils;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;

/**
 *
 * @author AdrianBusak
 */
public class UploadBooksPanel extends javax.swing.JPanel {

    public UploadBooksPanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lsBooks = new javax.swing.JList<>();
        btnUploadBooks = new javax.swing.JButton();

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jScrollPane1.setViewportView(lsBooks);

        btnUploadBooks.setText("Upload Books");
        btnUploadBooks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadBooksActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1160, Short.MAX_VALUE)
                    .addComponent(btnUploadBooks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(18, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 604, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnUploadBooks, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnUploadBooksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadBooksActionPerformed
        new Thread(() -> {
            try {
                List<Book> books = BookParser.parse();
                repository.createBooks(books);

                java.awt.EventQueue.invokeLater(() -> {
                    try {
                        loadModel();
                    } catch (Exception ex) {
                        Logger.getLogger(UploadBooksPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });

            } catch (Exception ex) {
                java.awt.EventQueue.invokeLater(() -> {
                    MessageUtils.showErrorMessage("Unrecoverable error", "Unable to upload books");
                });
            }
        }).start();
    }//GEN-LAST:event_btnUploadBooksActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        init();
    }//GEN-LAST:event_formComponentShown


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnUploadBooks;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList<Book> lsBooks;
    // End of variables declaration//GEN-END:variables

    private DefaultListModel<Book> booksModel;
    private BookRepository repository;

    private void init() {
        try {
            repository = RepositoryFactory.getRepository(BookRepository.class);
            booksModel = new DefaultListModel<>();
            loadModel();
        } catch (Exception ex) {
            Logger.getLogger(UploadBooksPanel.class.getName()).log(Level.SEVERE, null, ex);
            MessageUtils.showErrorMessage("Unrecoverable error", "Cannot initiate the form");
            System.exit(1);
        }
    }

    private void loadModel() throws Exception {
        List<Book> books = repository.selectBooks();
        booksModel.clear();
        books.forEach(booksModel::addElement);
        lsBooks.setModel(booksModel);
    }

}
